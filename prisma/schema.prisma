// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_POSTGRES_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  balance      Balance?
  transactions Transaction[]
  topUps       TopUp[]

  @@map("users")
}

model Balance {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique @map("user_id")
  balance   Decimal  @default(0) @db.Decimal(15, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("balances")
}

model Service {
  id            Int      @id @default(autoincrement())
  serviceCode   String   @unique @map("service_code")
  serviceName   String   @map("service_name")
  serviceTariff Decimal  @map("service_tariff") @db.Decimal(15, 2)
  description   String?
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  transactions Transaction[]

  @@map("services")
}

model TopUp {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  amount    Decimal  @db.Decimal(15, 2)
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("top_ups")
}

model Transaction {
  id            Int      @id @default(autoincrement())
  invoiceNumber String   @unique @map("invoice_number")
  userId        Int      @map("user_id")
  serviceId     Int?     @map("service_id")
  serviceCode   String?  @map("service_code")
  serviceName   String?  @map("service_name")
  totalAmount   Decimal  @map("total_amount") @db.Decimal(15, 2)
  description   String?
  createdAt     DateTime @default(now()) @map("created_at")

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([invoiceNumber])
  @@map("transactions")
}
